
import React from 'react';
import * as d3 from 'd3';
import GraphAxis from 'components/GraphAxis/GraphAxis';

function LineGraph(props) {
  const chartId = props.chartId || 'jgi-line-graph';
  const viewWidth = props.width || 480;
  const viewHeight = props.height || 240;
  const data = props.graphData;
  const margin = {top: 20, right: 20, bottom: 20, left: 20};

  const w = viewWidth - (margin.left + margin.right);
  const h = viewHeight - (margin.top + margin.bottom);

  // const axisMargins = {
  //   marginBottom: viewHeight - margin.bottom,
  //   marginLeft: margin.left
  // };
  // const axisMarginBottom = ;
  // const axisMarginLeft   = margin.left;

  // percent graph axis should extend past max y
  const graphFactor = 0.1;

  data.forEach(function(i){i['dt'] = new Date(i.datetime) });

  if(data.length === 0) { return null }
  if(data.length === 1) { return null }

  const num = function(d){ return d.number};
  const baseMinNum = d3.min(data, num);
  const baseMaxNum = d3.max(data, num);

  //reset mins and maxs so all data fits inside graph
  const minNum = baseMinNum - Math.abs(baseMinNum*graphFactor);
  const maxNum = baseMaxNum + Math.abs(baseMaxNum*graphFactor);

  const startDt = data[0].dt;
  const endDt = data[data.length-1].dt;

  const y = d3.scaleLinear()
      .domain( [ minNum, maxNum ] )
      .range([h,0]); // reversed since svg 0,0 is top, left

  const x = d3.scaleTime()
      .domain( [ startDt, endDt ] )
      .range([0, w]);

  const xVal = function(d) { return x(d.dt); };
  const yVal = function(d) { return y(d.number); };

  const transform = 'translate('+(margin.left)+','+(margin.top)+')';
  //var transform = 'translate('+(margin.left)+', '+(userHeight+margin.top)+')';

  const line = d3.line()
      .x(xVal)
      .y(yVal);

  // const xAxis = d3.axisBottom(x).tickValues([0, 0.01, 0.1, 1, 2, 3, 10]);
  // const yAxis = d3.axisLeft(y).tickValues([0, 0.01, 0.1, 1, 2, 3, 10]);
  //
  //
  //
  //
  // // var xAxis = d3.axisBottom(x).tickFormat(function(d){ return d.x;});
  // // var yAxis = d3.axisLeft(y).tickFormat(function(d){ return 3;}).ticks(5);

  // var yAxis = d3.axisLeft(y)
  //     .tickFormat(function(d,i) { return i })
  //     .ticks(5);

  // var xAxis = d3.axisBottom(x)
  //     // .tickFormat(function(d,i){ return i })
  //     .ticks(4);

  var xAxis = d3.axisBottom(x)
      .tickFormat(data.map(function(d,i){
        if(i>0)
          return d.date;
      }).splice(1))
      .ticks(4);

  var yAxis = d3.axisLeft(y)
      .tickFormat(function(d,i) { return i })
      .ticks(5);

  // viewport-fill is temporary
  return (
    <svg id={chartId} width={viewWidth} height={viewHeight} className="line-graph">
      <GraphAxis bottom={margin.bottom} left={margin.left} axis={yAxis} axisType="y" />
      <GraphAxis bottom={viewHeight - margin.bottom} left={margin.left} axis={xAxis} axisType="x"/>
      <g transform={transform}>
        <path d={line(data)} fill="none" stroke="#000" strokeLinecap="round"/>
      </g>
    </svg>
  );
}

export default LineGraph;
