
import React from 'react';
import * as d3 from 'd3';

function LineGraph(props) {
  const chartId = props.chartId || 'jgi-line-graph';
  const userWidth = props.width || 400;
  const userHeight = props.height || 200;
  const data = props.graphData;
  const margin = {top: 10, right: 10, bottom: 10, left: 10};

  const w = userWidth - (margin.left + margin.right);
  const h = userHeight - (margin.top + margin.bottom);

  // percent graph axis should extend past max y
  const graphFactor = 0.1;

  data.forEach(function(i){i['dt'] = new Date(i.datetime) });

  if(data.length === 0) { return null }
  if(data.length === 1) { return null }

  const num = function(d){ return d.number};
  const baseMinNum = d3.min(data, num);
  const baseMaxNum = d3.max(data, num);

  //reset mins and maxs so all data fits inside graph
  const minNum = baseMinNum - Math.abs(baseMinNum*graphFactor);
  const maxNum = baseMaxNum + Math.abs(baseMaxNum*graphFactor);

  const startDt = data[0].dt;
  const endDt = data[data.length-1].dt;

  const y = d3.scaleLinear()
      .domain( [ minNum, maxNum ] )
      .range([0, h]);

  const x = d3.scaleTime()
      .domain( [ startDt, endDt ] )
      .range([0, w]);

  const xVal = function(d) { return x(d.dt); };
  const yVal = function(d) { return -1 * y(d.number); };

  const transform = 'translate('+(0)+','+(200)+')';
  //var transform = 'translate('+(margin.left)+', '+(userHeight+margin.top)+')';

  const line = d3.line()
      .x(xVal)
      .y(yVal);

  return (
    <svg id={chartId} width={props.width} height={props.height}>

      <g transform={transform}>
        <path className="line shadow" d={line(data)} strokeLinecap="round"/>
      </g>
    </svg>
  );
}

export default LineGraph;
