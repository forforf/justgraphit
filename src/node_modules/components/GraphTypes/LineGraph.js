
import React, { Component } from 'react';
import * as d3 from 'd3';
import moment from 'moment';
import GraphAxis from 'components/GraphAxis/GraphAxis';


class LineGraph extends Component {

  d3AxisMaker = (data, x, y) => {
    const bottomTickValues = this.tickTimeSelector(data.map(function(o){ return o.dt; }));

    const xAxis = d3.axisBottom(x)
        .tickValues(bottomTickValues)
        .tickFormat(this.tickLabels);

    const yAxis = d3.axisLeft(y)
        .tickFormat(d3.format(".0s"))
        .ticks(5);

    return {
      x: xAxis,
      y: yAxis
    }
  };

  d3Grapher = (data, size, margin) => {
    const num = function(d){ return d.number};

    const minNum = d3.min(data, num);
    const maxNum = d3.max(data, num);

    const startDt = data[0].dt;
    const endDt = data[data.length-1].dt;

    const y = d3.scaleLinear()
        .domain( [ minNum, maxNum ] )
        .range([size.h,0]); // reversed since svg 0,0 is top, left

    const x = d3.scaleTime()
        .domain( [ startDt, endDt ] )
        .range([0, size.w]);

    const xVal = function(d) { return x(d.dt); };
    const yVal = function(d) { return y(d.number); };

    const transform = 'translate('+(margin.left)+','+(margin.top)+')';

    const line = d3.line()
        .x(xVal)
        .y(yVal);

    return {
      x: x,
      y: y,
      line: line(data),
      transform: transform
    }
  };

  graphSize = (viewSize, margin) => {
    const h = viewSize.height - (margin.top + margin.bottom);
    const w = viewSize.width - (margin.left + margin.right);
    return { height: h, width: w}
  };

  parseMergeDatetime = (obj) => {
    obj['dt'] = new Date(obj.datetime);
    return obj;
  };

  tickLabels(date) { return moment(date).fromNow(); }

  // Generates ticks for the time axis (i.e, x axis)
  tickTimeSelector(baseTimeTicks) {
    const first = baseTimeTicks[0];
    const last  = baseTimeTicks[baseTimeTicks.length - 1];
    const midpoint = new Date((first.getTime() + last.getTime()) / 2);
    return [first, last, midpoint ]
  }

  // constructor(props) {
  //   super(props);
  // }

  render () {
    const margin = {top: 20, right: 50, bottom: 20, left: 50};
    const h = this.graphSize(this.props, margin).height;
    const w = this.graphSize(this.props, margin).width;

    const data = this.props.graphData.map( o => this.parseMergeDatetime(o) );

    if(data.length === 0) { return null }
    if(data.length === 1) { return null }

    const d3Graph = this.d3Grapher(data, {h:h, w:w}, margin);
    const d3Axis = this.d3AxisMaker(data, d3Graph.x, d3Graph.y);

    // ToDo: Add support for tooltips when I figure out how to make it compatible with mobile devices
    return (
        <svg id={this.props.chartId} width={this.props.width} height={this.props.height} className="line-graph">
          <GraphAxis bottom={margin.bottom} left={margin.left} axis={d3Axis.y} axisType="y" />
          <GraphAxis bottom={this.props.height - margin.bottom} left={margin.left} axis={d3Axis.x} axisType="x"/>
          <g transform={d3Graph.transform}>
            <path d={d3Graph.line} fill="none" stroke="#000" strokeLinecap="round"/>
          </g>
        </svg>
    );
  }
}

LineGraph.propTypes = {
  chartId: React.PropTypes.string,
  height:  React.PropTypes.number,
  width:   React.PropTypes.number
};

LineGraph.defaultProps = {
  chartId: 'jgi-line-graph',
  height: 240,
  width: 480
};

export default LineGraph;
