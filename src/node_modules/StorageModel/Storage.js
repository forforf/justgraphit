
import History from './History';

// ToDo Needs testing

class Storage {

  constructor() {
    this.store = {};
    this.history = new History(2);
  }
  
  getAll() { return this.store; };

  getLabeledObject(storageObj) {
    console.log('getLabeledObject',storageObj);
    const storageObjKeys = Object.keys(storageObj);
    console.log('storage obj keys', storageObjKeys);
    const storageObjSize = storageObjKeys.length;
    if (storageObjSize !==1) {
      console.error('Expected a single stored object, but got ', storageObjSize);
    }
    const objName = storageObjKeys[0];
    const objData = storageObj[objName];
    console.log('labeld obj returning', objName, objData);
    return { name: objName, data: objData };
  }
  
  getLastKey() {
    return this.history.getLast();
  }

  // returns key and data
  getLastKeyValue() {
    let obj = {};
    const key = this.getLastKey();
    const val = this.load( key );
    // return {key: key, value: val}
    obj[key] = val;
    console.log('storage: get last obj', obj);
    return obj;
  };

  
  isEmpty() {
    return Object.keys(this.store).length === 0;
  }

  load(key) {
    // this.updateHistory(key);
    return this.store[key];
  };

  save(key, val) {
    this.updateHistory(key);
    this.store[key] = val;
    return key;
  };


  
  updateHistory(key) {
    console.log('Storage updateHistory', key);
    if (key && key.length) {
      console.log('saving to history:', key);
      this.history.push(key);
    }

  }
}

export default Storage;
