
import React, { Component } from 'react';

class GraphInput extends Component {

  constructor(props) {
    super(props);
    console.log('Graph Input props', props);
    this.updateGraphNow = props.updateGraphNow;
    this.state = {
      numberInput: '',
      nameInput: this.props.currentGraphObj.key
    };

    this.handleNumberInputChange = this.handleNumberInputChange.bind(this);
    this.handleNameInputChange = this.handleNameInputChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleNumberInputChange(event) {
    console.log("Number Input event.target", event.target);
    this.setState({numberInput: event.target.value});
  }

  handleNameInputChange(event) {
    console.log("Name Input event.target", event.target);
    this.setState({nameInput: event.target.value});
  }

  handleSubmit(event) {
    console.log('Form Submitted (name, number): ', this.state.nameInput, this.state.numberInput);
      // we don't set state here directly because we want to update the data store
      // and we'll let that action result in re-rendering the component

    // // TODO: THIS IS WRONG - We need to grab the graph based on the graph name. If graph name doesn't exist create new graph
    //   let mutatingGraph = this.props.currentGraphObj.value;
    // // TODO: SEE ABOVE, DON"T IGNORE THIS
    // // TODO: ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    //   mutatingGraph.push({number: parseFloat(this.state.numberInput), datetime: new Date().toISOString()});
    //   console.log('GraphInput updating graph' , this.props.currentGraphObj.key, mutatingGraph);
    if(this.state.nameInput.length){
      console.log('Submitting', this.state.nameInput, this.state.numberInput);
      this.updateGraphNow(this.state.nameInput, this.state.numberInput);
    }
    // this.updateGraph(this.state.numberInput);
    event.preventDefault();
  }

  // updateGraph(newVal){
  //   // we don't set state here directly because we want to update the data store
  //   // and we'll let that action result in re-rendering the component
  //   let mutatingGraph = this.props.currentGraphObj.value;
  //   mutatingGraph.push({number: parseFloat(newVal), datetime: new Date().toISOString()});
  //   console.log('GraphInput updating graph' , this.props.currentGraphObj.key, mutatingGraph);
  //   this.persistFn(this.props.currentGraphObj.key, mutatingGraph);
  // }
  // persistGraphObj(name, graphData) {
  //   this.storage.save(name, graphData);
  //   const currentGraphObj = this.storage.getLastKeyValue();
  //   this.setState({currentGraphObj: currentGraphObj});
  // }

  render() {
    return (
        <div className="GraphInput">
          <h3>Graph It</h3>
          <div className="GraphInput-name">
            <h5>{this.props.currentGraphObj.key}</h5>
          </div>
          <form onSubmit={this.handleSubmit}>
            <label>
              Name:
              <input type="text" value={this.state.nameInput} onChange={this.handleNameInputChange} />
            </label>
            <label>
              Number:
              <input type="number" value={this.state.numberInput} onChange={this.handleNumberInputChange} />
            </label>
            <input type="submit" value="Save" />
          </form>

        </div>
    );
  }
}
//
// class NameForm extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = {value: ''};
//
//     this.handleChange = this.handleChange.bind(this);
//     this.handleSubmit = this.handleSubmit.bind(this);
//   }
//
//   handleChange(event) {
//     this.setState({value: event.target.value});
//   }
//
//   handleSubmit(event) {
//     alert('A name was submitted: ' + this.state.value);
//     event.preventDefault();
//   }
//
//   render() {
//     return (
//         <form onSubmit={this.handleSubmit}>
//           <label>
//             Name:
//             <input type="text" value={this.state.value} onChange={this.handleChange} />
//           </label>
//           <input type="submit" value="Submit" />
//         </form>
//     );
//   }
// }

export default GraphInput;